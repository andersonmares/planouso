<?php

namespace Admin\AdminBundle\Repository;
use ClassesWithParents\D;

/**
 * AtividadePlanoUsoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AtividadePlanoUsoRepository extends \Doctrine\ORM\EntityRepository
{
	public function listarAtividade($idAcao,$param){

		$result =  $this->createQueryBuilder('a')
			->select('a.id, a.nuPrioridade, a.nuAnoExercicioAtividade , a.vlTotal, a.vlExecutarExercicio, a.nuProposta, b.dsVinculoPlanejamento, c.dsTipoInstrumento, d.dsRedePrograma, e.dsAtividade, f.dsTipoAtividade, g.sgUf, h.id as coMunicipioIbge, h.noMunicipioAcentuado,i.noStatus')
			->innerJoin('Admin\AdminBundle\Entity\AcaoOrcamentaria', 'z', 'WITH', 'z.id = a.coAcaoOrcamentaria and z.stRegistroAtivo = :stRegistroAtivo')
			->innerJoin('Admin\AdminBundle\Entity\StatusItem','i','WITH','i.coSeqStatus = a.seqStatus')
			->leftJoin('Admin\AdminBundle\Entity\VinculoPlanejamento', 'b', 'WITH', 'b.id = a.coVinculoPlanejamento and b.stRegistroAtivo = :stRegistroAtivo')
			->leftJoin('Admin\AdminBundle\Entity\TipoInstrumento', 'c', 'WITH', 'c.id = a.coTipoInstrumento and c.stRegistroAtivo = :stRegistroAtivo')
			->leftJoin('Admin\AdminBundle\Entity\RedePrograma', 'd', 'WITH', 'd.id = a.coRedeprogramaPlanouso and d.stRegistroAtivo = :stRegistroAtivo')
			->leftJoin('Admin\AdminBundle\Entity\Atividade', 'e', 'WITH', 'e.id = a.coAtividade and e.stRegistroAtivo = :stRegistroAtivo')
			->leftJoin('Admin\AdminBundle\Entity\TipoAtividade', 'f', 'WITH', 'f.id = a.coTipoAtividade and f.stRegistroAtivo = :stRegistroAtivo')
			->leftJoin('Admin\AdminBundle\Entity\UF', 'g', 'WITH', 'g.id = a.coUfIbge and g.stRegistroAtivo = :stRegistroAtivo')
			->leftJoin('Admin\AdminBundle\Entity\Municipio', 'h', 'WITH', 'h.id = a.coMunicipioIbge and h.stRegistroAtivo = :stRegistroAtivo and h.stMunicipio = :stMunicipio')
			->andWhere('a.coAcaoOrcamentaria = :coAcaoOrcamentaria')
			->andWhere('a.stRegistroAtivo = :stRegistroAtivo')
			->setParameter('coAcaoOrcamentaria', $idAcao)
			->setParameter('stRegistroAtivo', 'S')
			->setParameter('stMunicipio', 'ATIVO')
			->orderBy('a.nuPrioridade');

		if(isset($param['processamentoFilter']['nuProcesso']) && !empty($param['processamentoFilter']['nuProcesso'])){
			$result->andWhere('a.nuProcesso = :nuProcesso' )
				->setParameter('nuProcesso',$param['processamentoFilter']['nuProcesso']);
		}
		if(isset($param['processamentoFilter']['nuProposta'])){
			$result->andWhere('a.nuProposta like :nuProposta' )
				->setParameter('nuProposta','%'.$param['processamentoFilter']['nuProposta'].'%');
		}

		if(isset($param['processamentoFilter']['coStatus'])){
			$result->andWhere('a.coStatus = :coStatus' )
				->setParameter('coStatus',$param['processamentoFilter']['coStatus']);
		}


		if(isset($param['processamentoFilter']['nuPlanoOrcamentario'])  && !empty($param['processamentoFilter']['nuPlanoOrcamentario']) ){
			$result->andWhere('a.nuPlanoOrcamentario like :nuPlanoOrcamentario' )
				->setParameter('nuPlanoOrcamentario','%'.$param['processamentoFilter']['nuPlanoOrcamentario'].'%');
		}


		return $result->getQuery()->getResult();

	}

	public function relatorioAtividade($nuAnoExercicio) {
		$rs = $this->createQueryBuilder('a')
			->select('
			        a.id,
					b.nuAcaoOrcamentaria, b.nuPlanoOrcamentario,
					depResp.sgDepartamento as sgDepartamentoResp,
					depAtv.sgDepartamento as sgDepartamentoAtv,
					b.dsDenominacao, b.vlAtualizado, i.dsTipoDespesa,
					GREATEST(nvl(b.vlDespesaEmpenhada, 0), nvl(b.vlDespesaEmpenhadaAliquidar, 0), nvl(b.vlDepesaEmpenhadaLiquidada, 0)) as vlEmpenhado,
					a.id, a.nuPrioridade, a.nuAnoExercicioAtividade , a.vlTotal, a.vlExecutarExercicio, a.vlProcessadoCgpo, c.dsVinculoPlanejamento, d.dsTipoInstrumento,
					e.dsRedePrograma, h.dsTipoComponente, f.dsAtividade, g.dsTipoAtividade, decode(a.coUfIbge, \'XX\', \'TODOS\', k.sgUf) as sgUf, l.id as coMunicipioIbge, l.noMunicipioAcentuado,
					a.dsJustificativa, a.coCnes, a.nuProposta, a.nuProcesso, a.nuPortaria, to_char(a.dtPortaria, \'dd/mm/yyyy\') as dtPortaria, a.dsObservacao,
					j.noPessoaFisica, to_char(a.dtCadastro, \'dd/mm/yyyy\') as dtCadastro, to_char(a.dtAtualizacao, \'dd/mm/yyyy\') as dtAtualizacao, n.nuNotaEmpenho, n.nuProcesso as nuProcessoNotaempenho, n.dsNotaEmpenho, NVL(n.vlEmpenhado, 0) as vlEmpenhadoNotaempenho 
				')
			->innerJoin('Admin\AdminBundle\Entity\AcaoOrcamentaria', 'b', 'WITH', 'b.id = a.coAcaoOrcamentaria and b.stRegistroAtivo = :stRegistroAtivo')
            ->innerJoin( 'Admin\AdminBundle\Entity\Departamento', 'depResp', 'WITH', 'depResp.id = b.coDepartamento')
            ->innerJoin( 'Admin\AdminBundle\Entity\Departamento', 'depAtv', 'WITH', 'depAtv.id = a.coDepartamento')
			->leftJoin('Admin\AdminBundle\Entity\VinculoPlanejamento', 'c', 'WITH', 'c.id = a.coVinculoPlanejamento and c.stRegistroAtivo = :stRegistroAtivo')
			->leftJoin('Admin\AdminBundle\Entity\TipoInstrumento', 'd', 'WITH', 'd.id = a.coTipoInstrumento and d.stRegistroAtivo = :stRegistroAtivo')
			->leftJoin('Admin\AdminBundle\Entity\Atividade', 'f', 'WITH', 'f.id = a.coAtividade and f.stRegistroAtivo = :stRegistroAtivo')
			->leftJoin('Admin\AdminBundle\Entity\TipoAtividade', 'g', 'WITH', 'g.id = a.coTipoAtividade and g.stRegistroAtivo = :stRegistroAtivo')
			->leftJoin('Admin\AdminBundle\Entity\TipoComponente', 'h', 'WITH', 'h.id = a.coTipoComponente and h.stRegistroAtivo = :stRegistroAtivo')
			->leftJoin('\Admin\AdminBundle\Entity\TipoDespesa', 'i', 'WITH', 'i.id = b.coTipoDespesa and i.stRegistroAtivo = :stRegistroAtivo')
			->leftJoin('Admin\AdminBundle\Entity\RedePrograma', 'e', 'WITH', 'e.id = a.coRedeprogramaPlanouso and e.stRegistroAtivo = :stRegistroAtivo')
			->innerJoin('Admin\AdminBundle\Entity\UsuarioPessoaFisica', 'j', 'WITH', 'j.coUsuario = a.coUsuario')
			->leftJoin('Admin\AdminBundle\Entity\UF', 'k', 'WITH', 'k.id = a.coUfIbge')
			->leftJoin('Admin\AdminBundle\Entity\Municipio', 'l', 'WITH', 'l.id = a.coMunicipioIbge and l.stRegistroAtivo = :stRegistroAtivo and l.stMunicipio = :stMunicipio')
			->leftJoin('Admin\AdminBundle\Entity\RlNotaEmpenhoAtividadePlanouso', 'm', 'WITH', 'm.coAtividadePlanouso = a.id and m.stRegistroAtivo = :stRegistroAtivo')
			->leftJoin('Admin\AdminBundle\Entity\NotaEmpenho', 'n', 'WITH', 'n.id = m.coNotaEmpenhoPlanouso and n.stRegistroAtivo = :stRegistroAtivo')
			->andWhere('b.nuAnoExercicio = :nuAnoExercicio')
			->andWhere('a.stRegistroAtivo = :stRegistroAtivo')
			->setParameter('nuAnoExercicio', $nuAnoExercicio)
			->setParameter('stRegistroAtivo', 'S')
			->setParameter('stMunicipio', 'ATIVO')
			->orderBy('b.nuAcaoOrcamentaria, b.nuPlanoOrcamentario,  a.nuPrioridade')
            ->getQuery()
            ->getArrayResult();
        return $rs;
	}

    public function relatorioAtividadeDepartamento($nuAnoExercicio, $coDepartamento) {
        $rs = $this->createQueryBuilder('a')
            ->select('
			        a.id,
					b.nuAcaoOrcamentaria, b.nuPlanoOrcamentario, b.dsDenominacao, b.vlAtualizado, i.dsTipoDespesa,
					GREATEST(nvl(b.vlDespesaEmpenhada, 0), nvl(b.vlDespesaEmpenhadaAliquidar, 0), nvl(b.vlDepesaEmpenhadaLiquidada, 0)) as vlEmpenhado,
					a.id, a.nuPrioridade, a.nuAnoExercicioAtividade , a.vlTotal, a.vlExecutarExercicio, a.vlProcessadoCgpo, c.dsVinculoPlanejamento, d.dsTipoInstrumento,
					e.dsRedePrograma, h.dsTipoComponente, f.dsAtividade, g.dsTipoAtividade, k.sgUf, l.id as coMunicipioIbge, l.noMunicipioAcentuado,
					a.dsJustificativa, a.coCnes, a.nuProposta, a.nuProcesso, a.nuPortaria, to_char(a.dtPortaria, \'dd/mm/yyyy\') as dtPortaria, a.dsObservacao,
					j.noPessoaFisica, to_char(a.dtCadastro, \'dd/mm/yyyy\') as dtCadastro, to_char(a.dtAtualizacao, \'dd/mm/yyyy\') as dtAtualizacao, n.nuNotaEmpenho, n.nuProcesso as nuProcessoNotaempenho, n.dsNotaEmpenho, NVL(n.vlEmpenhado, 0) as vlEmpenhadoNotaempenho 
				')
            ->innerJoin('Admin\AdminBundle\Entity\AcaoOrcamentaria', 'b', 'WITH', 'b.id = a.coAcaoOrcamentaria and b.stRegistroAtivo = :stRegistroAtivo')
            ->leftJoin('Admin\AdminBundle\Entity\VinculoPlanejamento', 'c', 'WITH', 'c.id = a.coVinculoPlanejamento and c.stRegistroAtivo = :stRegistroAtivo')
            ->leftJoin('Admin\AdminBundle\Entity\TipoInstrumento', 'd', 'WITH', 'd.id = a.coTipoInstrumento and d.stRegistroAtivo = :stRegistroAtivo')
            ->leftJoin('Admin\AdminBundle\Entity\Atividade', 'f', 'WITH', 'f.id = a.coAtividade and f.stRegistroAtivo = :stRegistroAtivo')
            ->leftJoin('Admin\AdminBundle\Entity\TipoAtividade', 'g', 'WITH', 'g.id = a.coTipoAtividade and g.stRegistroAtivo = :stRegistroAtivo')
            ->leftJoin('Admin\AdminBundle\Entity\TipoComponente', 'h', 'WITH', 'h.id = a.coTipoComponente and h.stRegistroAtivo = :stRegistroAtivo')
            ->leftJoin('\Admin\AdminBundle\Entity\TipoDespesa', 'i', 'WITH', 'i.id = b.coTipoDespesa and i.stRegistroAtivo = :stRegistroAtivo')
            ->leftJoin('Admin\AdminBundle\Entity\RedePrograma', 'e', 'WITH', 'e.id = a.coRedeprogramaPlanouso and e.stRegistroAtivo = :stRegistroAtivo')
            ->innerJoin('Admin\AdminBundle\Entity\UsuarioPessoaFisica', 'j', 'WITH', 'j.coUsuario = a.coUsuario')
            ->leftJoin('Admin\AdminBundle\Entity\UF', 'k', 'WITH', 'k.id = a.coUfIbge and k.stRegistroAtivo = :stRegistroAtivo')
            ->leftJoin('Admin\AdminBundle\Entity\Municipio', 'l', 'WITH', 'l.id = a.coMunicipioIbge and l.stRegistroAtivo = :stRegistroAtivo and l.stMunicipio = :stMunicipio')
            ->leftJoin('Admin\AdminBundle\Entity\RlNotaEmpenhoAtividadePlanouso', 'm', 'WITH', 'm.coAtividadePlanouso = a.id and m.stRegistroAtivo = :stRegistroAtivo')
            ->leftJoin('Admin\AdminBundle\Entity\NotaEmpenho', 'n', 'WITH', 'n.id = m.coNotaEmpenhoPlanouso and n.stRegistroAtivo = :stRegistroAtivo')
            ->andWhere('b.nuAnoExercicio = :nuAnoExercicio')
            ->andWhere('a.coDepartamento = :coDepartamento')
            ->andWhere('a.stRegistroAtivo = :stRegistroAtivo')
            ->setParameter('nuAnoExercicio', $nuAnoExercicio)
            ->setParameter('coDepartamento', $coDepartamento)
            ->setParameter('stRegistroAtivo', 'S')
            ->setParameter('stMunicipio', 'ATIVO')
            ->orderBy('b.nuAcaoOrcamentaria, b.nuPlanoOrcamentario,  a.nuPrioridade')
            ->getQuery()
            ->getArrayResult();
        return $rs;
    }
}
